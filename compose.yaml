services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_URL: ${DATABASE_URL}
    container_name: gpu-saviors-api
    restart: on-failure:3
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      JWT_ACCESS_KEY_SECRET: ${JWT_ACCESS_KEY_SECRET}
      JWT_REFRESH_KEY_SECRET: ${JWT_REFRESH_KEY_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      PORT: 8080
      FRONTEND_URL: ${FRONTEND_URL}
    volumes:
      - app_logs:/opt/gpu_saviors-be/logs
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  app-replica:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_URL: ${DATABASE_URL}
    container_name: gpu-saviors-api-replica
    restart: on-failure:3
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      JWT_ACCESS_KEY_SECRET: ${JWT_ACCESS_KEY_SECRET}
      JWT_REFRESH_KEY_SECRET: ${JWT_REFRESH_KEY_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      PORT: 8080
      FRONTEND_URL: ${FRONTEND_URL}
    volumes:
      - app_logs_replica:/opt/gpu_saviors-be/logs
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  caddy:
    image: caddy:2.7-alpine
    container_name: gpu-saviors-caddy
    restart: on-failure:3
    depends_on:
      - app
      - app-replica
    ports:
      - "8080:8080"
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    networks:
      - app-network
    environment:
      - VPS_IP=${VPS_IP}

volumes:
  app_logs:
    driver: local
  app_logs_replica:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  caddy_logs:
    driver: local

networks:
  app-network:
    driver: bridge

